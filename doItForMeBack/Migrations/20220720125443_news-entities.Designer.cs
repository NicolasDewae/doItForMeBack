// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using doItForMeBack.Data;

#nullable disable

namespace doItForMeBack.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220720125443_news-entities")]
    partial class newsentities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("doItForMeBack.Entities.Ban", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("BanDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBan")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("doItForMeBack.Entities.Mission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ClaimantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("MissionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimantId");

                    b.HasIndex("UserId");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("doItForMeBack.Entities.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Star")
                        .HasColumnType("float");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserRateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRateId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("doItForMeBack.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MissionId")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MissionId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("doItForMeBack.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("BanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Picture")
                        .HasColumnType("longtext");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BanId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("doItForMeBack.Entities.Ban", b =>
                {
                    b.HasOne("doItForMeBack.Entities.Mission", null)
                        .WithOne("Ban")
                        .HasForeignKey("doItForMeBack.Entities.Ban", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("doItForMeBack.Entities.User", "UserBan")
                        .WithOne()
                        .HasForeignKey("doItForMeBack.Entities.Ban", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserBan");
                });

            modelBuilder.Entity("doItForMeBack.Entities.Mission", b =>
                {
                    b.HasOne("doItForMeBack.Entities.User", "Claimant")
                        .WithMany()
                        .HasForeignKey("ClaimantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("doItForMeBack.Entities.Report", null)
                        .WithOne("Mission")
                        .HasForeignKey("doItForMeBack.Entities.Mission", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("doItForMeBack.Entities.User", null)
                        .WithMany("Mission")
                        .HasForeignKey("UserId");

                    b.Navigation("Claimant");
                });

            modelBuilder.Entity("doItForMeBack.Entities.Rate", b =>
                {
                    b.HasOne("doItForMeBack.Entities.User", null)
                        .WithMany("Rate")
                        .HasForeignKey("UserId");

                    b.HasOne("doItForMeBack.Entities.User", "UserRate")
                        .WithMany()
                        .HasForeignKey("UserRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRate");
                });

            modelBuilder.Entity("doItForMeBack.Entities.Report", b =>
                {
                    b.HasOne("doItForMeBack.Entities.Mission", null)
                        .WithMany("Report")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("doItForMeBack.Entities.User", b =>
                {
                    b.HasOne("doItForMeBack.Entities.Ban", "Ban")
                        .WithMany()
                        .HasForeignKey("BanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("doItForMeBack.Entities.Mission", null)
                        .WithOne("Maker")
                        .HasForeignKey("doItForMeBack.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("doItForMeBack.Entities.Rate", null)
                        .WithOne("UserRated")
                        .HasForeignKey("doItForMeBack.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("doItForMeBack.Entities.Report", null)
                        .WithOne("User")
                        .HasForeignKey("doItForMeBack.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ban");
                });

            modelBuilder.Entity("doItForMeBack.Entities.Mission", b =>
                {
                    b.Navigation("Ban")
                        .IsRequired();

                    b.Navigation("Maker")
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("doItForMeBack.Entities.Rate", b =>
                {
                    b.Navigation("UserRated")
                        .IsRequired();
                });

            modelBuilder.Entity("doItForMeBack.Entities.Report", b =>
                {
                    b.Navigation("Mission")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("doItForMeBack.Entities.User", b =>
                {
                    b.Navigation("Mission");

                    b.Navigation("Rate");
                });
#pragma warning restore 612, 618
        }
    }
}
